De cpu heeft 16 64-bit general purpose registers. Men kan het volledige register aanpassen, of slechts een deel,bv
rax		64
eax		32
ax		16
al		8

De registers zijn (64 bit): rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15
Sommige van deze registers mag men niet gebruiken in code:
rsp -> wijst naar de top van de stack
rbp -> wijst naar de base van de functie
rip -> wijst naar de volgende instructie die men zal uitvoeren
rFlags -> flags van de cpu

De XMM registers zijn voor SIMD en floating point operaties. Zo heeft men er 16 van 128 bit.
Sommige processoren hebben ook 256-bit XMM.
XMM wordt ook gebruikt voor Streaming SIMD Extensions <<<<<<<<<<<<<<<???????????????????????????????????

De CPU heeft een intern klein geheugen genaamd de CACHE. Wanneer men uit het geheugen iets nodig heeft wordt het eerst
in de cache geladen en dan uitgevoerd. Om zo efficient mogelijk iets te maken moet men zo veel mogelijk er voor 
zorgen dat men cache hits krijgt ipv cache misses.

Een geheugen ziet er als volgt uit (van hoog naar laag):

Stack
...
heap
bss (uninitialized data)
data
text (code)
reserved

Floating point representatie gebeurt volgens IEEE 754. Het heeft drie delen: Sign, Exponent en Mantissa. Bv:
-7.75
sign is negatief -> 1
-7.75 = -0111.11
zet om naar wetenschappelijk
-1.1111 x 2^2
   ^^^^  = mantissa
Neem de exponent en doe het +127
2 + 127 = 1000 0001
=====>>>>>>>>>>>>>>>>> 1100 0000 1111 1000 0000 0000 0000 0000
=====>>>>>>>>>>>>>>>>> C0F80000

=================
4. Program Format
=================

De assembly code moet een correct formaat hebben:
Data section
BSS section
Text section

Comments starten met ;
Hexadecimals hebben prefix 0x
octals hebben suffix q
constanten worden gegeven door equ: SIZE equ 1000. Deze wordt vervangen door de effectieve waarde tijdens het assembly process.
Men start de data section door "section .data". Dit is een lijst van variabelen in het volgende formaat: naam type initiele_waarde

De datatypes zijn:
db		8 bit
dw		16 bit
dd		32 bit
dq		64 bit
ddq		128 bit (integer)
dt		128 bit (float)

Arrays specifieert men komma separated: arr dd 10, 20, 40

Men start de bss section door "section .bss". Ze voldoen aan het formaat: naam type lengte.
De verschillende datatypes zijn:
resb	8 bit
resw	16 bit
resd	32 bit
resq	64 bit
resdq	128 bit

De code zelf start men door "section .text". De entry point is
global _start
_start:

=================
5. Tool Chain
=================
De toolchain is als volgt:
1. Assembler: zet de code om van assembly naar machinetaal (object files)
2. Linker: linkt alle objecten samen
3. Loader: laadt de executable in het geheugen

De assembler yasm: "yasm -g dwarf2 -f elf64 example.asm -l example.lst"
-g dwarf2 : zegt dat men een bepaald soort debugging moet toevoegen
-f elf64: zegt dat het geassembleerd moet worden volgens het formaat van 64bit linux
-l example.lst: maak een list file aan. Deze bevat voor elke assembly lijn de vertaling en het origineel: 36 00000009 40660301          dVar1    dd  17000000

De linker ld: ld -g -o example example.o
-g: voeg debugging info toe
-o example: output file

Als men over verschillende bestanden variabelen/functies wilt gebruiken, gebruikt men "extern"

=================
7. Instruction set overview
=================

Data movement: mov dest, how_much src
	mov eax, dword [myvar]

Memory gebruiken doet men door brackets. Als men een variabele geeft zonder [], dan wordt het adres genomen.

mov rax, qword [var1]		; value of var1 in rax
mov rax, var1				; address of var1 in rax

Men kan ook het adres opvragen door de load effective addres
	lea rcx, byte [bvar]

Wanneer men een widening doet (van byte naar word moven), moet men rekening houden met de bits die niet in de src zitten.
Met movzx kan men een move doen zonder dat de vorige bits gereset moeten worden.
Voor signed is het equivalent movsx en movsxd (afhankelijk van de destination)

Men heeft ook enkele operaties die specifiek van een bepaalde register een widening doen:
cbw, cwd, cwde, cdq, cdqe, cqo

Som van twee registers:
add <dest>,<src>

Men kan ook een increment van 1 doen. Als we een memory access doen, moeten we het type specifieren
inc <operand>

Als men een carry mee wilt nemen naar een addition, dan moet men adc gebruiken:
adc <dest>,<src>     ===>  <dest> = <dest> + <src> + <carrybit>

Een verschil ergens van nemen heeft equivalente operaties: sub en dec

Multiplication is ietwat complexer, aangezien er een deel van in een ander register gestoken moet worden.
Als men bijvoorbeeld twee getallen van 8 bit vermenigvuldigt, kan men een 16-bit getal krijgen.
Men steekt dus eerst een waarde in de A register. Vervolgens doet men "mul <operand>". De oplossing zit dan
uiteindelijk gedeeltelijk in de A, gedeeltelijk in D.

















